version: '3.4'
services:
  eureka-svc:
    container_name: eureka-svc
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    environment:
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
    ports:
      - "${EUREKA_SVC_PORT}:${EUREKA_SVC_PORT}"
    networks:
      - song_platform_network
    healthcheck:
      test: "wget --no-verbose --spider localhost:${EUREKA_SVC_PORT}/actuator/health || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  config-svc:
    container_name: config-svc
    build:
      context: ./config-service
      dockerfile: Dockerfile
    environment:
      - CONF_SVC_PORT=${CONF_SVC_PORT}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
      - EUREKA_PREFER_IP_ADDRESS=${EUREKA_PREFER_IP_ADDRESS}
    ports:
      - "${CONF_SVC_EXP_PORT}:${CONF_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      eureka-svc:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c "(wget --no-verbose --spider localhost:${CONF_SVC_PORT}/actuator/health
        && wget --no-verbose --spider http://eureka-svc:${EUREKA_SVC_PORT}/eureka/apps/config-service) || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}

  auth-svc:
    container_name: auth-svc
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - AUTH_SVC_PORT=${AUTH_SVC_PORT}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
      - EUREKA_PREFER_IP_ADDRESS=${EUREKA_PREFER_IP_ADDRESS}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - REDIRECT_URI=${REDIRECT_URI}
      - CLIENT_SCOPE=${CLIENT_SCOPE}
      - RESOURCE_CLIENT_ID=${RESOURCE_CLIENT_ID}
      - RESOURCE_CLIENT_SECRET=${RESOURCE_CLIENT_SECRET}
    ports:
      - "${AUTH_SVC_EXP_PORT}:${AUTH_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      eureka-svc:
        condition: service_healthy
    healthcheck:
      test: "wget --no-verbose --spider localhost:${AUTH_SVC_PORT}/actuator/health || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  gateway-svc:
    container_name: gateway-svc
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    environment:
      - CONFIG_SVC_HOST=config-svc
      - CONFIG_SVC_PORT=${CONF_SVC_PORT}
    ports:
      - "${GATEWAY_SVC_EXP_PORT}:${GATEWAY_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      eureka-svc:
        condition: service_healthy
      config-svc:
        condition: service_healthy
    healthcheck:
      test: "wget --no-verbose --spider localhost:${GATEWAY_SVC_PORT}/actuator/health || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  resource-svc:
    container_name: resource-svc
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    environment:
      - RESOURCE_SVC_PORT=${RESOURCE_SVC_PORT}
      - RESOURCE_DB_HOST=resource-svc-db
      - RESOURCE_DB_PORT=${RESOURCE_DB_SVC_PORT}
      - RESOURCE_DB_USERNAME=${RESOURCE_DB_USER}
      - RESOURCE_DB_PASSWORD=${RESOURCE_DB_PASS}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
      - EUREKA_PREFER_IP_ADDRESS=${EUREKA_PREFER_IP_ADDRESS}
      - ACCESS_KEY=${ACCESS_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - AWS_ENDPOINT=${AWS_ENDPOINT}:${CLOUD_PORT}
      - S3_AUDIO_BUCKET=${S3_AUDIO_BUCKET}
      - MQ_HOST=${MQ_HOST}
      - MQ_CLIENT_PORT=${MQ_CLIENT_PORT}
      - MQ_USER=${MQ_USER}
      - MQ_PASS=${MQ_PASS}
      - MESSAGE_DESTINATION=${MESSAGE_DESTINATION}
      - ROLLBACK_DESTINATION=${ROLLBACK_DESTINATION}
      - ROLLBACK_CONSUMER_GROUP=${ROLLBACK_CONSUMER_GROUP}
      - SUCCESS_DESTINATION=${SUCCESS_DESTINATION}
      - SUCCESS_CONSUMER_GROUP=${SUCCESS_CONSUMER_GROUP}
      - STORAGE_SERVICE_NAME=storage-service
      - TOKEN_URI=http://auth-svc:${AUTH_SVC_PORT}/api/auth/oauth2/token
    ports:
      - "${RESOURCE_SVC_EXP_PORT}:${RESOURCE_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      resource-svc-db:
        condition: service_healthy
      eureka-svc:
        condition: service_healthy
      localstack:
        condition: service_healthy
      rabbitmq-svc:
        condition: service_healthy
    healthcheck:
      test: "wget --no-verbose --spider localhost:${RESOURCE_SVC_PORT}/actuator/health || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  resource-svc-db:
    container_name: resource-svc-db
    image: postgres:12.19-alpine3.20
    environment:
      POSTGRES_USER: ${RESOURCE_DB_USER}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASS}
      POSTGRES_DB: resourcedb
    ports:
      - "${RESOURCE_DB_EXP_PORT}:${RESOURCE_DB_SVC_PORT}"
    networks:
      - song_platform_network
    volumes:
      - ./resource-service/init-db:/docker-entrypoint-initdb.d
      - resource-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${RESOURCE_DB_USER}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  song-svc:
    image: song-service
    build:
      context: ./song-service
      dockerfile: Dockerfile
    environment:
      - SONG_SVC_PORT=${SONG_SVC_PORT}
      - SONG_DB_HOST=song-svc-db
      - SONG_DB_PORT=${SONG_DB_SVC_PORT}
      - SONG_DB_USERNAME=${SONG_DB_USER}
      - SONG_DB_PASSWORD=${SONG_DB_PASS}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
      - EUREKA_PREFER_IP_ADDRESS=${EUREKA_PREFER_IP_ADDRESS}
    ports:
      - "${SONG_SVC_EXP_PORT}:${SONG_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      song-svc-db:
        condition: service_healthy
      eureka-svc:
        condition: service_healthy
    deploy:
      replicas: 2
    healthcheck:
      test: "wget --no-verbose --spider localhost:${SONG_SVC_PORT}/actuator/health || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  song-svc-db:
    container_name: song-svc-db
    image: postgres:12.19-alpine3.20
    environment:
      POSTGRES_USER: ${SONG_DB_USER}
      POSTGRES_PASSWORD: ${SONG_DB_PASS}
      POSTGRES_DB: songdb
    ports:
      - "${SONG_DB_EXP_PORT}:${SONG_DB_SVC_PORT}"
    networks:
      - song_platform_network
    volumes:
      - ./song-service/init-db:/docker-entrypoint-initdb.d
      - song-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${SONG_DB_USER}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  processor-svc:
    container_name: processor-svc
    build:
      context: ./resource-processor
      dockerfile: Dockerfile
    environment:
      - PROCESSOR_SVC_PORT=${PROCESSOR_SVC_PORT}
      - MQ_HOST=${MQ_HOST}
      - MQ_CLIENT_PORT=${MQ_CLIENT_PORT}
      - MQ_USER=${MQ_USER}
      - MQ_PASS=${MQ_PASS}
      - MESSAGE_DESTINATION=${MESSAGE_DESTINATION}
      - RESOURCE_SERVICE_NAME=resource-service
      - SONG_SERVICE_NAME=song-service
      - CONSUMER_GROUP=${CONSUMER_GROUP}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
    ports:
      - "${PROCESSOR_SVC_EXP_PORT}:${PROCESSOR_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      rabbitmq-svc:
        condition: service_healthy
      eureka-svc:
        condition: service_healthy
    healthcheck:
      test: "wget --no-verbose --spider localhost:${PROCESSOR_SVC_PORT}/actuator/health || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  rabbitmq-svc:
    image: rabbitmq:management
    container_name: rabbitmq-svc
    hostname: ${MQ_HOST}
    ports:
      - "${MQ_CLIENT_PORT}:${MQ_CLIENT_PORT}"
      - "${MQ_MANAGEMENT_PORT}:${MQ_MANAGEMENT_PORT}"
    networks:
      - song_platform_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  localstack:
    image: localstack/localstack
    container_name: localstack
    environment:
      - SERVICES=${SERVICES}
      - DEFAULT_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${SECRET_KEY}
      - PERSISTENCE=1
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
    ports:
      - "${CLOUD_PORT}:${CLOUD_PORT}"
    networks:
      - song_platform_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "${AWS_ENDPOINT}:${CLOUD_PORT}/_localstack/health" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  create-bucket:
    image: amazon/aws-cli
    container_name: create-bucket
    depends_on:
      localstack:
        condition: service_healthy
    volumes:
      - ./service-scripts/create-bucket.sh:/create-bucket.sh
    env_file:
      - .env
    entrypoint: [ "/bin/sh", "-c", "sleep 10; /create-bucket.sh" ]
    networks:
      - song_platform_network

  storage-svc:
    image: storage-service
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    environment:
      - STORAGE_SVC_PORT=${STORAGE_SVC_PORT}
      - STORAGE_DB_HOST=storage-svc-db
      - STORAGE_DB_PORT=${STORAGE_DB_SVC_PORT}
      - STORAGE_DB_USERNAME=${STORAGE_DB_USER}
      - STORAGE_DB_PASSWORD=${STORAGE_DB_PASS}
      - S3_AUDIO_BUCKET=${S3_AUDIO_BUCKET}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
      - EUREKA_PREFER_IP_ADDRESS=${EUREKA_PREFER_IP_ADDRESS}
      - JWK_SET_URI=http://auth-svc:${AUTH_SVC_PORT}/api/auth/oauth2/jwks
    ports:
      - "${STORAGE_SVC_EXP_PORT}:${STORAGE_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      storage-svc-db:
        condition: service_healthy
      eureka-svc:
        condition: service_healthy
    healthcheck:
      test: "wget --no-verbose --spider localhost:${STORAGE_SVC_PORT}/actuator/health || exit 1"
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  storage-svc-db:
    container_name: storage-svc-db
    image: postgres:12.19-alpine3.20
    environment:
      POSTGRES_USER: ${STORAGE_DB_USER}
      POSTGRES_PASSWORD: ${STORAGE_DB_PASS}
      POSTGRES_DB: storagedb
    ports:
      - "${STORAGE_DB_EXP_PORT}:${STORAGE_DB_SVC_PORT}"
    networks:
      - song_platform_network
    volumes:
      - ./storage-service/init-db:/docker-entrypoint-initdb.d
      - storage-service-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${STORAGE_DB_USER}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_SVC_PORT}:${PROMETHEUS_SVC_PORT}"
    networks:
      - song_platform_network
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      eureka-svc:
        condition: service_healthy

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "${ES_PORT}:${ES_PORT}"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - song_platform_network

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:${ES_PORT}
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:${ES_PORT}"]'
    depends_on:
      - elasticsearch
    networks:
      - song_platform_network

  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - song_platform_network
    depends_on:
      - elasticsearch

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_SVC_PORT}:${GRAFANA_SVC_PORT}"
    networks:
      - song_platform_network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      prometheus:
        condition: service_started

networks:
  song_platform_network:
    driver: bridge

volumes:
  song-service-postgres-data:
  resource-service-postgres-data:
  storage-service-postgres-data:
  grafana-data:
  elasticsearch_data:
    driver: local