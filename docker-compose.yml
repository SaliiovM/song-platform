version: '3'
services:
  eureka-svc:
    container_name: eureka-svc
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    environment:
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
    ports:
      - "${EUREKA_SVC_PORT}:${EUREKA_SVC_PORT}"
    networks:
      - song_platform_network

  resource-svc:
    container_name: resource-svc
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    environment:
      - RESOURCE_SVC_PORT=${RESOURCE_SVC_PORT}
      - RESOURCE_DB_HOST=resource-svc-db
      - RESOURCE_DB_PORT=${RESOURCE_DB_SVC_PORT}
      - RESOURCE_DB_USERNAME=${RESOURCE_DB_USER}
      - RESOURCE_DB_PASSWORD=${RESOURCE_DB_PASS}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
      - EUREKA_PREFER_IP_ADDRESS=${EUREKA_PREFER_IP_ADDRESS}
      - ACCESS_KEY=${ACCESS_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - AWS_ENDPOINT=${AWS_ENDPOINT}:${CLOUD_PORT}
      - S3_AUDIO_BUCKET=${S3_AUDIO_BUCKET}
      - MQ_HOST=${MQ_HOST}
      - MQ_CLIENT_PORT=${MQ_CLIENT_PORT}
      - MQ_USER=${MQ_USER}
      - MQ_PASS=${MQ_PASS}
      - MESSAGE_DESTINATION=${MESSAGE_DESTINATION}
      - ROLLBACK_DESTINATION=${ROLLBACK_DESTINATION}
      - ROLLBACK_CONSUMER_GROUP=${ROLLBACK_CONSUMER_GROUP}
    ports:
      - "${RESOURCE_SVC_EXP_PORT}:${RESOURCE_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      - resource-svc-db
      - eureka-svc
      - localstack
      - rabbitmq-svc

  resource-svc-db:
    container_name: resource-svc-db
    image: postgres:12.19-alpine3.20
    environment:
      POSTGRES_USER: ${RESOURCE_DB_USER}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASS}
      POSTGRES_DB: resourcedb
    ports:
      - "${RESOURCE_DB_EXP_PORT}:${RESOURCE_DB_SVC_PORT}"
    networks:
      - song_platform_network
    volumes:
      - ./resource-service/init-db:/docker-entrypoint-initdb.d
      - resource-service-postgres-data:/var/lib/postgresql/data

  song-svc:
    image: song-service
    build:
      context: ./song-service
      dockerfile: Dockerfile
    environment:
      - SONG_SVC_PORT=${SONG_SVC_PORT}
      - SONG_DB_HOST=song-svc-db
      - SONG_DB_PORT=${SONG_DB_SVC_PORT}
      - SONG_DB_USERNAME=${SONG_DB_USER}
      - SONG_DB_PASSWORD=${SONG_DB_PASS}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
      - EUREKA_PREFER_IP_ADDRESS=${EUREKA_PREFER_IP_ADDRESS}
    ports:
      - "${SONG_SVC_EXP_PORT}:${SONG_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      - song-svc-db
      - eureka-svc
    deploy:
      replicas: 2

  song-svc-db:
    container_name: song-svc-db
    image: postgres:12.19-alpine3.20
    environment:
      POSTGRES_USER: ${SONG_DB_USER}
      POSTGRES_PASSWORD: ${SONG_DB_PASS}
      POSTGRES_DB: songdb
    ports:
      - "${SONG_DB_EXP_PORT}:${SONG_DB_SVC_PORT}"
    networks:
      - song_platform_network
    volumes:
      - ./song-service/init-db:/docker-entrypoint-initdb.d
      - song-service-postgres-data:/var/lib/postgresql/data

  processor-svc:
    container_name: processor-svc
    build:
      context: ./resource-processor
      dockerfile: Dockerfile
    environment:
      - PROCESSOR_SVC_PORT=${PROCESSOR_SVC_PORT}
      - MQ_HOST=${MQ_HOST}
      - MQ_CLIENT_PORT=${MQ_CLIENT_PORT}
      - MQ_USER=${MQ_USER}
      - MQ_PASS=${MQ_PASS}
      - MESSAGE_DESTINATION=${MESSAGE_DESTINATION}
      - RESOURCE_SERVICE_NAME=resource-service
      - SONG_SERVICE_NAME=song-service
      - CONSUMER_GROUP=${CONSUMER_GROUP}
      - EUREKA_SVC_HOST=eureka-svc
      - EUREKA_SVC_PORT=${EUREKA_SVC_PORT}
    ports:
      - "${PROCESSOR_SVC_EXP_PORT}:${PROCESSOR_SVC_PORT}"
    networks:
      - song_platform_network
    depends_on:
      - rabbitmq-svc
      - eureka-svc

  rabbitmq-svc:
    image: rabbitmq:management
    container_name: rabbitmq-svc
    hostname: ${MQ_HOST}
    ports:
      - "${MQ_CLIENT_PORT}:${MQ_CLIENT_PORT}"
      - "${MQ_MANAGEMENT_PORT}:${MQ_MANAGEMENT_PORT}"
    networks:
      - song_platform_network

  localstack:
    image: localstack/localstack
    container_name: localstack
    environment:
      - SERVICES=${SERVICES}
      - DEFAULT_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${SECRET_KEY}
      - PERSISTENCE=1
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
    ports:
      - "${CLOUD_PORT}:${CLOUD_PORT}"
    networks:
      - song_platform_network

  create-bucket:
    image: amazon/aws-cli
    container_name: create-bucket
    depends_on:
      - localstack
    volumes:
      - ./service-scripts/create-bucket.sh:/create-bucket.sh
    env_file:
      - .env
    entrypoint: [ "/bin/sh", "-c", "sleep 10; /create-bucket.sh" ]
    networks:
      - song_platform_network

networks:
  song_platform_network:
    driver: bridge

volumes:
  song-service-postgres-data:
  resource-service-postgres-data:
