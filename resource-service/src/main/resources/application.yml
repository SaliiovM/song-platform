spring:
  application:
    name: resource-service
  datasource:
    url: jdbc:postgresql://${RESOURCE_DB_HOST:localhost}:${RESOURCE_DB_PORT:5432}/resourcedb
    username: ${RESOURCE_DB_USERNAME:postgres}
    password: ${RESOURCE_DB_PASSWORD:root}
  cloud:
    stream:
      bindings:
        processRollback-in-0:
          destination: ${ROLLBACK_DESTINATION:resource-rollback-queue}
          group: ${ROLLBACK_CONSUMER_GROUP:resource-rollback-group}
          function: processRollback
        resourceCreationSuccess-in-0:
          destination: ${SUCCESS_DESTINATION:resource-success-queue}
          group: ${SUCCESS_CONSUMER_GROUP:resource-success-group}
          function: resourceCreationSuccess
    function:
      definition: processRollback;resourceCreationSuccess
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  rabbitmq:
    host: ${MQ_HOST:localhost}
    port: ${MQ_CLIENT_PORT:5672}
    username: ${MQ_USER:guest}
    password: ${MQ_PASS:guest}
  security:
    oauth2:
      client:
        registration:
          storage-service:
            client-id: ${RESOURCE_CLIENT_ID:resource-service-client}
            client-secret: ${RESOURCE_CLIENT_SECRET:resource-service-secret}
            authorization-grant-type: client_credentials
            scope: storage:read,storage:write
        provider:
          storage-service:
            token-uri: ${TOKEN_URI:http://localhost:8046/api/auth/oauth2/token}

server:
  port: ${RESOURCE_SVC_PORT:8080}

eureka:
  client:
    serviceUrl:
      defaultZone: http://${EUREKA_SVC_HOST:localhost}:${EUREKA_SVC_PORT:8761}/eureka
  instance:
    preferIpAddress: ${EUREKA_PREFER_IP_ADDRESS:true}
    metadataMap:
      "prometheus.scrape": "true"
      "prometheus.path": "/actuator/prometheus"
      "prometheus.port": ${RESOURCE_SVC_PORT:8080}

cloud:
  aws:
    stack:
      auto: false
    region:
      static: ${AWS_REGION:us-east-1}
    credentials:
      access-key: ${ACCESS_KEY:test}
      secret-key: ${SECRET_KEY:test}
    end-point:
      uri: ${AWS_ENDPOINT:http://localhost:4566}

s3:
  bucket-name: ${S3_AUDIO_BUCKET:audio-resources}
  content-type: ${S3_CONTENT_TYPE:audio/mpeg}

resource:
  destination:
    created: ${MESSAGE_DESTINATION:resource-queue}

management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

storage-service-name: ${STORAGE_SERVICE_NAME:storage-service}

resilience4j:
    circuitbreaker:
        configs:
          default:
            slidingWindowSize: 10
            permittedNumberOfCallsInHalfOpenState: 3
            slowCallDurationThreshold: 4s
            slowCallRateThreshold: 90
            failureRateThreshold: 50
            waitDurationInOpenState: 10s
            minimumNumberOfCalls: 5
        instances:
          storageService:
            baseConfig: default

storage:
  stub:
    storageType: STUB
    bucket: ${S3_AUDIO_BUCKET:audio-resources}
    path: /fallback