spring:
  application:
    name: storage-service
  datasource:
    url: jdbc:postgresql://${STORAGE_DB_HOST:localhost}:${STORAGE_DB_PORT:5434}/storagedb
    username: ${STORAGE_DB_USERNAME:postgres}
    password: ${STORAGE_DB_PASSWORD:root}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${JWK_SET_URI:http://localhost:8046/api/auth/oauth2/jwks}

server:
  port: ${STORAGE_SVC_PORT:8080}

eureka:
  client:
    serviceUrl:
      defaultZone: http://${EUREKA_SVC_HOST:localhost}:${EUREKA_SVC_PORT:8761}/eureka
  instance:
    preferIpAddress: ${EUREKA_PREFER_IP_ADDRESS:true}
    metadataMap:
      "prometheus.scrape": "true"
      "prometheus.path": "/actuator/prometheus"
      "prometheus.port": ${STORAGE_SVC_PORT:8080}

storage:
  types:
    - storageType: STAGING
      bucket: ${S3_AUDIO_BUCKET:audio-resources}
      path: /staging
    - storageType: PERMANENT
      bucket: ${S3_AUDIO_BUCKET:audio-resources}
      path: /permanent
    - storageType: STUB
      bucket: ${S3_AUDIO_BUCKET:audio-resources}
      path: /fallback


management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true